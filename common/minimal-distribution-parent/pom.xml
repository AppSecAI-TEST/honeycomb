<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016 Cisco and/or its affiliates.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at:
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <groupId>io.fd.honeycomb.common</groupId>
        <artifactId>impl-parent</artifactId>
        <version>1.17.04-RC2</version>
        <relativePath>../impl-parent</relativePath>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <artifactId>minimal-distribution-parent</artifactId>
    <name>${project.artifactId}</name>
    <version>1.17.04-RC2</version>
    <packaging>pom</packaging>

    <properties>
        <exec.parameters>-Xms32m -Xmx128m -XX:MetaspaceSize=32m -XX:MaxMetaspaceSize=128m</exec.parameters>
        <exec.parameters.minimal>-client -Xms20m -Xmx32m -XX:MetaspaceSize=5m -XX:MaxMetaspaceSize=32m -XX:MaxMetaspaceExpansion=1m -Xss512k -XX:+UseSerialGC -Djava.compiler=NONE -Xverify:none -noverify</exec.parameters.minimal>

        <!-- Jersey versions to run RESTCONF-->
        <jersey.version>1.19.1</jersey.version>
        <jetty.version>9.3.11.v20160721</jetty.version>
        <servlet.version>3.1.0</servlet.version>
        <!-- Used by mdsal as provided/runtime dependency-->
        <osgi.core.version>5.0.0</osgi.core.version>
        <!-- Use /dev/urandom instead of /dev/random during tests to speed up execution
            http://stackoverflow.com/questions/137212/how-to-solve-performance-problem-with-java-securerandom
        -->
        <random.seed.file>/dev/./urandom</random.seed.file>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Jersey + Jetty for RESTCONF -->
            <dependency>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-server</artifactId>
                <version>${jetty.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${servlet.version}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-webapp</artifactId>
                <version>${jetty.version}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-servlets</artifactId>
                <version>${jetty.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sun.jersey</groupId>
                <artifactId>jersey-server</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sun.jersey</groupId>
                <artifactId>jersey-core</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sun.jersey</groupId>
                <artifactId>jersey-servlet</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <!-- OSGI Even tough not running in OSGI, dependency needs to be here since some deprecated MD-SAL APIs rely on osgi core -->
            <dependency>
                <groupId>org.osgi</groupId>
                <artifactId>org.osgi.core</artifactId>
                <version>${osgi.core.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- Generate executable shell script -->
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.6</version>
                    <configuration>
                        <archive>
                            <manifest>
                                <mainClass>${main.class}</mainClass>
                                <addClasspath>true</addClasspath>
                                <classpathPrefix>lib/</classpathPrefix>
                                <useUniqueVersions>false</useUniqueVersions>
                                <classpathMavenRepositoryLayout>true</classpathMavenRepositoryLayout>
                            </manifest>
                            <manifestEntries>
                                <Class-Path>config/ cert/ modules/</Class-Path>
                            </manifestEntries>
                        </archive>
                    </configuration>
                </plugin>

                <!-- Copy all dependencies -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>2.10</version>
                    <executions>
                        <execution>
                            <id>copy-dependencies</id>
                            <phase>package</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                <useBaseVersion>true</useBaseVersion>
                                <useRepositoryLayout>true</useRepositoryLayout>
                                <excludeArtifactIds>yang-jmx-generator</excludeArtifactIds>
                            </configuration>
                        </execution>
                        <execution>
                            <id>unpack-configuration</id>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>unpack-dependencies</goal>
                            </goals>
                            <configuration>
                                <includes>**/honeycomb-minimal-resources/</includes>
                                <outputDirectory>${project.build.outputDirectory}/</outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- Generate shell script -->
                <!-- Extract modules started by distribution -->
                <plugin>
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>groovy-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>start-scripts-generation</id>
                            <phase>package</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <source>
                                    io.fd.honeycomb.common.scripts.StartupScriptGenerator.generate(project, properties, log)
                                </source>
                            </configuration>
                        </execution>
                        <execution>
                            <id>distribution-module-assembly</id>
                            <!-- phase changed from package to earlier phase to generate module descriptor before distribution jar is created,
                             to include descriptor in the jar,to be accessible to children distributions-->
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <source>
                                    io.fd.honeycomb.common.scripts.ModulesListGenerator.generate(project, properties, log)
                                </source>
                            </configuration>
                        </execution>
                    </executions>
                    <dependencies>
                        <dependency>
                            <groupId>io.fd.honeycomb.common</groupId>
                            <artifactId>common-scripts</artifactId>
                            <version>1.17.04-RC2</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!-- Build archives -->
                <plugin>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>2.5.3</version>
                    <dependencies>
                        <dependency>
                            <groupId>io.fd.honeycomb.common</groupId>
                            <artifactId>minimal-assembly-descriptor</artifactId>
                            <version>1.17.04-RC2</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <id>create-archive</id>
                            <phase>package</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                            <configuration>
                                <descriptorRefs>
                                    <descriptorRef>honeycomb-minimal</descriptorRef>
                                </descriptorRefs>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <configuration>
                        <!--http://stackoverflow.com/questions/18107375/getting-skipping-jacoco-execution-due-to-missing-execution-data-file-upon-exec-->
                        <argLine>${argLine} -Djava.security.egd=file:${random.seed.file}</argLine>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
